// This is an autogenerated file from Firebase Studio.
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Wand2, LoaderCircle } from "lucide-react";
import { optimizeRoute, type OptimizeRouteOutput } from "@/ai/flows/optimize-route";
import type { BookingRequest } from "@/lib/types";
import { useToast } from "@/hooks/use-toast";

interface RouteOptimizerProps {
  trip: BookingRequest;
}

export default function RouteOptimizer({ trip }: RouteOptimizerProps) {
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [optimizationResult, setOptimizationResult] = useState<OptimizeRouteOutput | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const handleOptimizeRoute = async () => {
    setIsOptimizing(true);
    try {
      const result = await optimizeRoute({
        pickupLocation: trip.pickupLocation.name,
        destination: trip.destination.name,
        // In a real app, this could come from a live traffic API
        currentTrafficConditions: "Moderate traffic with some congestion on main roads.",
      });
      setOptimizationResult(result);
      setIsDialogOpen(true);
    } catch (error) {
      console.error("Error optimizing route:", error);
      toast({
        variant: "destructive",
        title: "Optimization Failed",
        description: "Could not get route optimizations at this time.",
      });
    } finally {
      setIsOptimizing(false);
    }
  };

  return (
    <>
      <Button 
        variant="outline" 
        className="w-full" 
        onClick={handleOptimizeRoute}
        disabled={isOptimizing}
      >
        {isOptimizing ? (
          <LoaderCircle className="animate-spin mr-2" />
        ) : (
          <Wand2 className="mr-2" />
        )}
        {isOptimizing ? "Optimizing..." : "Optimize Route"}
      </Button>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
                <Wand2 className="text-primary"/> AI Route Suggestion
            </DialogTitle>
            <DialogDescription>
              Here is an optimized route based on current conditions.
            </DialogDescription>
          </DialogHeader>
          {optimizationResult && (
            <div className="space-y-4 py-4">
              <div>
                <h3 className="font-semibold">Suggested Route</h3>
                <p className="text-sm text-muted-foreground">{optimizationResult.optimizedRoute}</p>
              </div>
              <div>
                <h3 className="font-semibold">Estimated Travel Time</h3>
                <p className="text-sm text-muted-foreground">{optimizationResult.estimatedTravelTime}</p>
              </div>
               <div>
                <h3 className="font-semibold">Reasoning</h3>
                <p className="text-sm text-muted-foreground">{optimizationResult.reasoning}</p>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button onClick={() => setIsDialogOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
